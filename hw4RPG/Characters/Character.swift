//
//  Character.swift
//  hw4RPG
//
//  Created by –∫—É–±–∞ –∂–∞–Ω–∞—Ç on 22.06.2022.
//

import Foundation

enum CharacterType: String {
    case Warrior, Mag, Superhero
}

class Character {
    
    // MARK: - Properties
    
    let name: String
    let type: CharacterType
    var weapon: Weapon
    let maxLife: Int
    var lifePoints: Int {
        // –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –ª—é–±–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
        willSet {
            if newValue > lifePoints && newValue > 0  {
                print("–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏—Å—Ü–µ–ª—è–µ—Ç—Å—è ... ")
            } else if newValue < lifePoints && newValue > 0 {
                print("–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞–ø–∞–¥–∞–µ—Ç... ")
            } else {
                print("–û–æ–æ, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —è—Ä–æ—Å—Ç–Ω—É—é –∞—Ç–∞–∫—É")
            }
        }
        // Observer after life change
        didSet {
            if oldValue > lifePoints && oldValue > 0 {
                print("\(self.name) –ø–æ—Ç–µ—Ä—è–ª \(oldValue - lifePoints) –æ—á–∫–æ–≤ –∂–∏–∑–Ω–∏")
            } else if oldValue < lifePoints && oldValue > 0 {
                print("\(self.name) —É—Å–∏–ª–µ–Ω–∏–µ \(lifePoints - oldValue) –æ—á–∫–æ–≤ –∂–∏–∑–Ω–∏")
            } else {
                print("–¢—ã –ø–æ–≥–∏–± –≤ –±–æ—é üí©")
            }
        }
    }
    
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–∑–Ω–∏
    var isDead: Bool {
        return lifePoints <= 0
    }
    
    // MARK: - Methods
    
    init(name: String, type: CharacterType, lifePoints: Int, maxLife: Int, weapon: Weapon) {
        self.name = name
        self.type = type
        self.lifePoints = lifePoints
        self.maxLife = maxLife
        self.weapon  = weapon
    }
    
    /// –û–ø–∏—Å–∞–Ω–∏–µ –∂–∏–∑–Ω–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    func description(index: Int) -> String {
        if isDead {
            return("‚ò†Ô∏è \(name) –Ω–∞ \(type) \(lifePoints)/\(maxLife) –ø–æ–≥–∏–± –≤–æ –≤—Ä–µ–º—è –±–æ—è. ‚ò†Ô∏è")
        } else {
            return("\(index). \(name) –Ω–∞ \(type) \(lifePoints)/\(maxLife) –æ—á–∫–∏ –∂–∏–∑–Ω–∏ /  \(weapon.weaponName) : \(weapon.damage) –Ω–∞–Ω–µ—Å–µ–Ω–∏–µ —É—â–µ—Ä–±–∞")
        }
    }
    
    /// –í—ã—á–∏—Ç–∞–Ω–∏–µ –æ—á–∫–æ–≤ –∂–∏–∑–Ω–∏ —Ü–µ–ª–∏
    func attack(_ target: Character) {
        // –í—ã—á–µ—Å—Ç—å —É—Ä–æ–Ω –æ—Ä—É–∂–∏—è –∏–∑ –æ—á–∫–æ–≤ –∂–∏–∑–Ω–∏ —Ü–µ–ª–∏.
        let newLifePoint = target.lifePoints - self.weapon.damage
        
        if lifePoints > 0 { // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–∑–Ω–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π isDead
            if target.isDead {
                print("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∞–¥–∞—Ç—å –Ω–∞ –º–µ—Ä—Ç–≤—ã—Ö –ª—é–¥–µ–π")
            } else {
                target.lifePoints = newLifePoint
                if target.lifePoints < 0  {
                    target.lifePoints = 0
                }
            }
        } else {
            print("–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ —É–∂–µ –º–µ—Ä—Ç–≤")
        }
    }
}

